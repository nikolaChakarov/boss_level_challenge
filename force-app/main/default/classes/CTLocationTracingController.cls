public with sharing class CTLocationTracingController {
    public static List<Location_Tracing__c> getVisitors(String locationId) {
        return [SELECT Id, LastModifiedDate, Person__r.Token__c, Person__r.Health_status__c, Location__c, Visit_Date__c
         FROM Location_Tracing__c 
         WHERE Id = :locationId  
         ORDER BY Visit_Date__c DESC];
    }

    public static List<Location_Tracing__c> getLocationsByPersonIds(Set<Id> personIds) {
        return [SELECT Id, Person__c, Location__c
        FROM Location_Tracing__c 
        WHERE Person__c IN :personIds
        AND Visit_Date__c = LAST_N_DAYS :10];
    }

    public static List<Location_Tracing__c> getLocationsByLocationIds(set<Id> locationIds) {
        String status = 'GREEN';
        return [SELECT Id, Person__c, Location__c
        FROM Location_Tracing__c 
        WHERE Location__c IN :locationIds
        AND Person__r.Health_Status__c = :status
        AND Visit_Date__c = LAST_N_DAYS :10];
    }

    public static List<Location_Tracing__c> checkDuplicates(List<Location_Tracing__c> newLocationTraces) {
        // store unique location Ids;
        Set<Id> locationIds = new Set<Id>();
        // store unique person Ids;
        Set<Id> personIds = new Set<Id>();

        for(Location_Tracing__c trace: newLocationTraces) {
            locationIds.add(trace.Location__c);
            personIds.add(trace.Person__c);
        }

        // map of location id, set of person ids;
        // location1, [person1, person2...];
        Map<Id, Set<Id>> mapOfExistingRecords = new Map<Id, Set<Id>>();
        // query existing location tracing records;
        List<Location_Tracing__c> existingRecords = [SELECT Id, Person__c, Location__c
         FROM Location_Tracing__c
         WHERE Person__c IN :personIds AND Location__c IN: locationIds];

         // list of duplicate records
         List<Location_Tracing__c> duplicates = new List<Location_Tracing__c>();

         if (existingRecords != null && existingRecords.size() > 0) {
            for(Location_Tracing__c trace: existingRecords) {
                if (!mapOfExistingRecords.containsKey(trace.Location__c)) {
                    mapOfExistingRecords.put(trace.Location__c, new Set<Id>());
                }

                // add person id to map set;
                mapOfExistingRecords.get(trace.Location__c).add(trace.Person__c);
            }

            // loop over new location tracing records;
            for(Location_Tracing__c trace: newLocationTraces) {
                // first check for location id
                // if item found in map, check for person in set;
                if (mapOfExistingRecords.containsKey(trace.Location__c) && mapOfExistingRecords.get(trace.Location__c).contains(trace.Person__c)) {
                    duplicates.add(trace);
                }
            }
         }

        return duplicates;
    }

    public static List<Location_Tracing__c> checkDuplicatess(List<Location_Tracing__c> newLocationTraces) {

        Set<Id> personIds = new Set<Id>();
        Set<Id> locationIds = new Set<Id>();
        
        for(Location_Tracing__c trace: newLocationTraces) {
            personIds.add(trace.Person__c);
            locationIds.add(trace.Location__c);
        }
        
        List<Location_Tracing__c> existingRecords = [
            SELECT Id, Name, Person__c, Location__c, Visit_Date__c 
            FROM Location_Tracing__c
            WHERE Person__c IN :personIds AND Location__c IN :locationIds];
        
        Map<Id, Set<Id>> mapOfExistingRecords = new Map<Id, Set<Id>>();

        List<Location_Tracing__c> duplicates = new List<Location_Tracing__c>();

        for(Location_Tracing__c trace: existingRecords) {
            if(!mapOfExistingRecords.containsKey(trace.Location__c)) {
                mapOfExistingRecords.put(trace.Location__c, new Set<Id>());
            }

            mapOfExistingRecords.get(trace.Location__c).add(trace.Person__c);
        }

        for(Location_Tracing__c trace: newLocationTraces) {
            if(mapOfExistingRecords.containsKey(trace.Location__c) && mapOfExistingRecords.get(trace.Location__c).contains(trace.Person__c)) {
                duplicates.add(trace);
            }
        }
        System.debug('existing records: ' + existingRecords);
        System.debug('duplicates: ' + duplicates);

        return duplicates;
    }
}